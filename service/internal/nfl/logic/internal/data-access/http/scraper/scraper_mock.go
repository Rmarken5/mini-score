// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rmarken5/mini-score/service/internal/nfl/data-access/http/scraper (interfaces: ScheduleScraper)

// Package scraper is a generated GoMock package.
package scraper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduleScraper is a mock of ScheduleScraper interface.
type MockScheduleScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleScraperMockRecorder
}

// MockScheduleScraperMockRecorder is the mock recorder for MockScheduleScraper.
type MockScheduleScraperMockRecorder struct {
	mock *MockScheduleScraper
}

// NewMockScheduleScraper creates a new mock instance.
func NewMockScheduleScraper(ctrl *gomock.Controller) *MockScheduleScraper {
	mock := &MockScheduleScraper{ctrl: ctrl}
	mock.recorder = &MockScheduleScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleScraper) EXPECT() *MockScheduleScraperMockRecorder {
	return m.recorder
}

// FetchGameInfo mocks base method.
func (m *MockScheduleScraper) FetchGameInfo(arg0 string) (GameInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGameInfo", arg0)
	ret0, _ := ret[0].(GameInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGameInfo indicates an expected call of FetchGameInfo.
func (mr *MockScheduleScraperMockRecorder) FetchGameInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGameInfo", reflect.TypeOf((*MockScheduleScraper)(nil).FetchGameInfo), arg0)
}

// FetchGamesForWeek mocks base method.
func (m *MockScheduleScraper) FetchGamesForWeek(arg0 Week) (Games, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGamesForWeek", arg0)
	ret0, _ := ret[0].(Games)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGamesForWeek indicates an expected call of FetchGamesForWeek.
func (mr *MockScheduleScraperMockRecorder) FetchGamesForWeek(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGamesForWeek", reflect.TypeOf((*MockScheduleScraper)(nil).FetchGamesForWeek), arg0)
}

// FetchGamesForWeeks mocks base method.
func (m *MockScheduleScraper) FetchGamesForWeeks(arg0 []Week) (Games, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGamesForWeeks", arg0)
	ret0, _ := ret[0].(Games)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGamesForWeeks indicates an expected call of FetchGamesForWeeks.
func (mr *MockScheduleScraperMockRecorder) FetchGamesForWeeks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGamesForWeeks", reflect.TypeOf((*MockScheduleScraper)(nil).FetchGamesForWeeks), arg0)
}

// FetchSchedule mocks base method.
func (m *MockScheduleScraper) FetchSchedule() (BySeasonType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchedule")
	ret0, _ := ret[0].(BySeasonType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchedule indicates an expected call of FetchSchedule.
func (mr *MockScheduleScraperMockRecorder) FetchSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchedule", reflect.TypeOf((*MockScheduleScraper)(nil).FetchSchedule))
}
