// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../nfl/data-access/db/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/rmarken5/mini-score/service/internal/nfl/logic/internal/data-access/db/repository"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamDAO is a mock of TeamDAO interface.
type MockTeamDAO struct {
	ctrl     *gomock.Controller
	recorder *MockTeamDAOMockRecorder
}

// MockTeamDAOMockRecorder is the mock recorder for MockTeamDAO.
type MockTeamDAOMockRecorder struct {
	mock *MockTeamDAO
}

// NewMockTeamDAO creates a new mock instance.
func NewMockTeamDAO(ctrl *gomock.Controller) *MockTeamDAO {
	mock := &MockTeamDAO{ctrl: ctrl}
	mock.recorder = &MockTeamDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamDAO) EXPECT() *MockTeamDAOMockRecorder {
	return m.recorder
}

// GetAllTeams mocks base method.
func (m *MockTeamDAO) GetAllTeams() ([]*repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams")
	ret0, _ := ret[0].([]*repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams.
func (mr *MockTeamDAOMockRecorder) GetAllTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockTeamDAO)(nil).GetAllTeams))
}

// GetTeamByAbv mocks base method.
func (m *MockTeamDAO) GetTeamByAbv(abbv string) (*repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByAbv", abbv)
	ret0, _ := ret[0].(*repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByAbv indicates an expected call of GetTeamByAbv.
func (mr *MockTeamDAOMockRecorder) GetTeamByAbv(abbv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByAbv", reflect.TypeOf((*MockTeamDAO)(nil).GetTeamByAbv), abbv)
}

// MockGameDAO is a mock of GameDAO interface.
type MockGameDAO struct {
	ctrl     *gomock.Controller
	recorder *MockGameDAOMockRecorder
}

// MockGameDAOMockRecorder is the mock recorder for MockGameDAO.
type MockGameDAOMockRecorder struct {
	mock *MockGameDAO
}

// NewMockGameDAO creates a new mock instance.
func NewMockGameDAO(ctrl *gomock.Controller) *MockGameDAO {
	mock := &MockGameDAO{ctrl: ctrl}
	mock.recorder = &MockGameDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameDAO) EXPECT() *MockGameDAOMockRecorder {
	return m.recorder
}

// GetGame mocks base method.
func (m *MockGameDAO) GetGame(gameID string) (repository.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", gameID)
	ret0, _ := ret[0].(repository.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockGameDAOMockRecorder) GetGame(gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockGameDAO)(nil).GetGame), gameID)
}

// GetGames mocks base method.
func (m *MockGameDAO) GetGames(start time.Time, end *time.Time) ([]repository.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGames", start, end)
	ret0, _ := ret[0].([]repository.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGames indicates an expected call of GetGames.
func (mr *MockGameDAOMockRecorder) GetGames(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGames", reflect.TypeOf((*MockGameDAO)(nil).GetGames), start, end)
}

// InsertGame mocks base method.
func (m *MockGameDAO) InsertGame(game repository.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGame indicates an expected call of InsertGame.
func (mr *MockGameDAOMockRecorder) InsertGame(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGame", reflect.TypeOf((*MockGameDAO)(nil).InsertGame), game)
}

// UpdateGameClock mocks base method.
func (m *MockGameDAO) UpdateGameClock(gameID, gameClock string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameClock", gameID, gameClock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameClock indicates an expected call of UpdateGameClock.
func (mr *MockGameDAOMockRecorder) UpdateGameClock(gameID, gameClock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameClock", reflect.TypeOf((*MockGameDAO)(nil).UpdateGameClock), gameID, gameClock)
}

// UpdateGameTime mocks base method.
func (m *MockGameDAO) UpdateGameTime(gameID string, gameClock time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameTime", gameID, gameClock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameTime indicates an expected call of UpdateGameTime.
func (mr *MockGameDAOMockRecorder) UpdateGameTime(gameID, gameClock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameTime", reflect.TypeOf((*MockGameDAO)(nil).UpdateGameTime), gameID, gameClock)
}

// UpdateQuarterGameClock mocks base method.
func (m *MockGameDAO) UpdateQuarterGameClock(gameID string, quarter int, gameClock string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuarterGameClock", gameID, quarter, gameClock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuarterGameClock indicates an expected call of UpdateQuarterGameClock.
func (mr *MockGameDAOMockRecorder) UpdateQuarterGameClock(gameID, quarter, gameClock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuarterGameClock", reflect.TypeOf((*MockGameDAO)(nil).UpdateQuarterGameClock), gameID, quarter, gameClock)
}

// MockGameQuarterScoreDAO is a mock of GameQuarterScoreDAO interface.
type MockGameQuarterScoreDAO struct {
	ctrl     *gomock.Controller
	recorder *MockGameQuarterScoreDAOMockRecorder
}

// MockGameQuarterScoreDAOMockRecorder is the mock recorder for MockGameQuarterScoreDAO.
type MockGameQuarterScoreDAOMockRecorder struct {
	mock *MockGameQuarterScoreDAO
}

// NewMockGameQuarterScoreDAO creates a new mock instance.
func NewMockGameQuarterScoreDAO(ctrl *gomock.Controller) *MockGameQuarterScoreDAO {
	mock := &MockGameQuarterScoreDAO{ctrl: ctrl}
	mock.recorder = &MockGameQuarterScoreDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameQuarterScoreDAO) EXPECT() *MockGameQuarterScoreDAOMockRecorder {
	return m.recorder
}

// GetQuarterScoreBy mocks base method.
func (m *MockGameQuarterScoreDAO) GetQuarterScoreBy(gameID, teamAbv, quarter string) (repository.GameQuarterScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuarterScoreBy", gameID, teamAbv, quarter)
	ret0, _ := ret[0].(repository.GameQuarterScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuarterScoreBy indicates an expected call of GetQuarterScoreBy.
func (mr *MockGameQuarterScoreDAOMockRecorder) GetQuarterScoreBy(gameID, teamAbv, quarter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuarterScoreBy", reflect.TypeOf((*MockGameQuarterScoreDAO)(nil).GetQuarterScoreBy), gameID, teamAbv, quarter)
}

// InsertQuarterScore mocks base method.
func (m *MockGameQuarterScoreDAO) InsertQuarterScore(quarterScore repository.GameQuarterScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQuarterScore", quarterScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertQuarterScore indicates an expected call of InsertQuarterScore.
func (mr *MockGameQuarterScoreDAOMockRecorder) InsertQuarterScore(quarterScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQuarterScore", reflect.TypeOf((*MockGameQuarterScoreDAO)(nil).InsertQuarterScore), quarterScore)
}

// UpdateQuarterScore mocks base method.
func (m *MockGameQuarterScoreDAO) UpdateQuarterScore(score int, gameID, teamAbv, quarter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuarterScore", score, gameID, teamAbv, quarter)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuarterScore indicates an expected call of UpdateQuarterScore.
func (mr *MockGameQuarterScoreDAOMockRecorder) UpdateQuarterScore(score, gameID, teamAbv, quarter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuarterScore", reflect.TypeOf((*MockGameQuarterScoreDAO)(nil).UpdateQuarterScore), score, gameID, teamAbv, quarter)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllTeams mocks base method.
func (m *MockRepository) GetAllTeams() ([]*repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams")
	ret0, _ := ret[0].([]*repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams.
func (mr *MockRepositoryMockRecorder) GetAllTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockRepository)(nil).GetAllTeams))
}

// GetGame mocks base method.
func (m *MockRepository) GetGame(gameID string) (repository.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", gameID)
	ret0, _ := ret[0].(repository.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockRepositoryMockRecorder) GetGame(gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockRepository)(nil).GetGame), gameID)
}

// GetGames mocks base method.
func (m *MockRepository) GetGames(start time.Time, end *time.Time) ([]repository.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGames", start, end)
	ret0, _ := ret[0].([]repository.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGames indicates an expected call of GetGames.
func (mr *MockRepositoryMockRecorder) GetGames(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGames", reflect.TypeOf((*MockRepository)(nil).GetGames), start, end)
}

// GetQuarterScoreBy mocks base method.
func (m *MockRepository) GetQuarterScoreBy(gameID, teamAbv, quarter string) (repository.GameQuarterScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuarterScoreBy", gameID, teamAbv, quarter)
	ret0, _ := ret[0].(repository.GameQuarterScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuarterScoreBy indicates an expected call of GetQuarterScoreBy.
func (mr *MockRepositoryMockRecorder) GetQuarterScoreBy(gameID, teamAbv, quarter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuarterScoreBy", reflect.TypeOf((*MockRepository)(nil).GetQuarterScoreBy), gameID, teamAbv, quarter)
}

// GetTeamByAbv mocks base method.
func (m *MockRepository) GetTeamByAbv(abbv string) (*repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByAbv", abbv)
	ret0, _ := ret[0].(*repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByAbv indicates an expected call of GetTeamByAbv.
func (mr *MockRepositoryMockRecorder) GetTeamByAbv(abbv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByAbv", reflect.TypeOf((*MockRepository)(nil).GetTeamByAbv), abbv)
}

// InsertGame mocks base method.
func (m *MockRepository) InsertGame(game repository.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGame indicates an expected call of InsertGame.
func (mr *MockRepositoryMockRecorder) InsertGame(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGame", reflect.TypeOf((*MockRepository)(nil).InsertGame), game)
}

// InsertQuarterScore mocks base method.
func (m *MockRepository) InsertQuarterScore(quarterScore repository.GameQuarterScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQuarterScore", quarterScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertQuarterScore indicates an expected call of InsertQuarterScore.
func (mr *MockRepositoryMockRecorder) InsertQuarterScore(quarterScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQuarterScore", reflect.TypeOf((*MockRepository)(nil).InsertQuarterScore), quarterScore)
}

// UpdateGameClock mocks base method.
func (m *MockRepository) UpdateGameClock(gameID, gameClock string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameClock", gameID, gameClock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameClock indicates an expected call of UpdateGameClock.
func (mr *MockRepositoryMockRecorder) UpdateGameClock(gameID, gameClock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameClock", reflect.TypeOf((*MockRepository)(nil).UpdateGameClock), gameID, gameClock)
}

// UpdateGameTime mocks base method.
func (m *MockRepository) UpdateGameTime(gameID string, gameClock time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameTime", gameID, gameClock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameTime indicates an expected call of UpdateGameTime.
func (mr *MockRepositoryMockRecorder) UpdateGameTime(gameID, gameClock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameTime", reflect.TypeOf((*MockRepository)(nil).UpdateGameTime), gameID, gameClock)
}

// UpdateQuarterGameClock mocks base method.
func (m *MockRepository) UpdateQuarterGameClock(gameID string, quarter int, gameClock string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuarterGameClock", gameID, quarter, gameClock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuarterGameClock indicates an expected call of UpdateQuarterGameClock.
func (mr *MockRepositoryMockRecorder) UpdateQuarterGameClock(gameID, quarter, gameClock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuarterGameClock", reflect.TypeOf((*MockRepository)(nil).UpdateQuarterGameClock), gameID, quarter, gameClock)
}

// UpdateQuarterScore mocks base method.
func (m *MockRepository) UpdateQuarterScore(score int, gameID, teamAbv, quarter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuarterScore", score, gameID, teamAbv, quarter)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuarterScore indicates an expected call of UpdateQuarterScore.
func (mr *MockRepositoryMockRecorder) UpdateQuarterScore(score, gameID, teamAbv, quarter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuarterScore", reflect.TypeOf((*MockRepository)(nil).UpdateQuarterScore), score, gameID, teamAbv, quarter)
}
